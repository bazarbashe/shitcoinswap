.container
  %h1.mt-5 Buy/Sell #{ @order.base_asset.name }
  #balances
    %p Available #{ @order.base_asset.symbol }: {{ STATE.balances[baseAssetId] ? STATE.balances[baseAssetId].available : 0.0 }}
    %p Available #{ @order.quote_asset.symbol }: {{ STATE.balances[quoteAssetId] ? STATE.balances[quoteAssetId].available : 0.0 }}
  .card-deck.mb-3
    .card
      = render 'form', order: @order

    .card#open_orders
      .card-header Order book
      .card-body
        %table.table
          %thead
            %tr
              %th Type
              %th= t '.amount_left'
              -# %th= t '.filled'
              %th
          %tbody
            %tr(v-for="order in openOrders.orderBy('rate')")
              %td {{ order.side }} @ {{ order.kind == 'market' ? 'market' : order.rate }}
              %td(v-if="order.kind == 'market' && order.side == 'buy'") {{ order.total - order.total_used }}
              %td(v-else) {{ order.quantity - order.quantity_filled }}
              -# %td {{ order.filled_percent }}%
              %td

  .card.mb-3
    .card-body
      #chart
      :coffeescript
        stockChart('chart', #{raw @asset.price_chart_data(@asset.platform.native_asset).to_json})

  .card#my_orders
    .card-header My open orders
    .card-body
      %table.table
        %thead
          %tr
            %th Type
            %th= t '.amount_left'
            %th= t '.filled'
            %th
        %tbody
          %tr(v-for="order in STATE.openOrders.orderBy('rate')")
            %td {{ order.side }} @ {{ order.kind == 'market' ? 'market' : order.rate }}
            %td(v-if="order.kind == 'market' && order.side == 'buy'") {{ order.total - order.total_used }}
            %td(v-else) {{ order.quantity - order.quantity_filled }}
            %td(v-if="order.kind == 'market' && order.side == 'buy'") {{ Math.floor(100 * order.total_used / order.total) }}%
            %td(v-else) {{ Math.floor(100 * order.quantity_filled / order.quantity) }}%
            %td
              %a(:href="`/orders/${order.id}`" data-method="delete" data-remote="true" rel="no-follow") Cancel

:coffeescript
  new Vue
    el: '#balances'
    data: ->
      STATE: STATE
      baseAssetId: #{ @order.base_asset_id }
      quoteAssetId: #{ @order.quote_asset_id.to_i }
  new Vue
    el: '#open_orders'
    subscriptions:
      OrdersChannel:
        params: ->
          asset_ids: [#{ @order.base_asset_id }]
        received: (message) ->
          if (message.cancelled_at || message.filled_at)
            @openOrders.delete(message)
          else
            @openOrders.upsert(message)
    data: ->
      openOrders: #{ raw @open_orders.to_json }

  new Vue
    el: '#my_orders'
    data: ->
      STATE: STATE
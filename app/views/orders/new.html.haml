.container
  %h1.mt-5 Buy/Sell #{ @order.base_asset.name }
  #balances
    %p Available #{ @order.base_asset.symbol }: {{ STATE.balances[baseAssetId] ? STATE.balances[baseAssetId].available : 0.0 }}
    %p Available #{ @order.quote_asset.symbol }: {{ STATE.balances[quoteAssetId] ? STATE.balances[quoteAssetId].available : 0.0 }}
  .card-deck.mb-3#newtrade
    .card
      = render 'form', order: @order

    .card#open_orders
      .card-header Order book (#{@order.base_asset.symbol}/#{@order.quote_asset.symbol})
      .card-body
        %table.table.table-hover
          %thead
            %tr
              %th Type
              %th= t '.amount_left'
              -# %th= t '.filled'
              %th
          %tbody
            %tr(v-for="order in openOrders.orderBy('price')" v-on:click="matchOrder(order)")
              %td {{ order.side }} @ {{ order.kind == 'market' ? 'market' : order.price }}
              %td(v-if="order.kind == 'market' && order.side == 'buy'") {{ big(order.total).minus(order.total_used).toFixed() }}
              %td(v-else) {{ big(order.quantity).minus(order.quantity_filled).toFixed() }}
              -# %td {{ order.filled_percent }}%
              %td

  .card.mb-3
    .card-body
      #chart
      :coffeescript
        stockChart('chart', #{raw @asset.price_chart_data(current_quote_asset.id).to_json})

  .card#my_orders
    .card-header My open orders
    .card-body
      %table.table
        %thead
          %tr
            %th Type
            %th= t '.amount_left'
            %th= t '.filled'
            %th
        %tbody
          %tr(v-for="order in STATE.openOrders.where({base_asset_id: #{@order.base_asset_id}, quote_asset_id: #{@order.quote_asset_id}}).orderBy('price')")
            %td {{ order.side }} @ {{ order.kind == 'market' ? 'market' : order.price }}
            %td(v-if="order.kind == 'market' && order.side == 'buy'") {{ big(order.total).minus(order.total_used).toFixed() }}
            %td(v-else) {{ big(order.quantity).minus(order.quantity_filled).toFixed() }}
            %td(v-if="order.kind == 'market' && order.side == 'buy'") {{ Math.floor(1000 * order.total_used / order.total) / 10 }}%
            %td(v-else) {{ Math.floor(1000 * order.quantity_filled / order.quantity) / 10 }}%
            %td
              %a(:href="`/orders/${order.id}`" data-method="delete" data-remote="true" rel="no-follow") Cancel

:coffeescript
  new Vue
    el: '#balances'
    data: ->
      STATE: STATE
      baseAssetId: #{ @order.base_asset_id }
      quoteAssetId: #{ @order.quote_asset_id.to_i }
  
  new Vue
    el: '#newtrade'
    computed:
      valid: ->
        if this.kind == 'market' && this.side == 'buy'
          this.total > this.min
        else
          this.quantity > this.min
      max_base: ->
        if STATE.balances[@base_asset_id] then STATE.balances[@base_asset_id] else 0
      max_quote: ->
        if STATE.balances[@quote_asset_id] then STATE.balances[@quote_asset_id] else 0
    methods:
      matchOrder: (order) ->
        @price = order.price
        @side = if order.side == 'sell' then 'buy' else 'sell'
        @kind = 'limit'
      big: (num) ->
        new Big(num)
    subscriptions:
      OrdersChannel:
        params: ->
          base_asset_ids: [#{ @order.base_asset_id }]
          quote_asset_id: #{ @order.quote_asset_id }
        received: (message) ->
          if (message.cancelled_at || message.filled_at)
            @openOrders.delete(message)
          else
            @openOrders.upsert(message)
    data: ->
      STATE: STATE
      min: 0.000001
      quantity: #{ @order.quantity.truth || current_user.available_balance(@order.base_asset) }
      total: #{ @order.total.truth || current_user.available_balance(@order.quote_asset) }
      side: '#{ @order.side || (current_user.available_balance(@order.base_asset) > 0 ? 'sell' : 'buy') }'
      kind: '#{ @order.kind || "market"}'
      price: #{ @order.price || @order.base_asset.buy_price(current_quote_asset) || @order.base_asset.sell_price(current_quote_asset) || 1 }
      base_asset_id: #{ @order.base_asset_id }
      quote_asset_id: #{ @order.quote_asset_id.to_i }
      openOrders: #{ raw @open_orders.to_json }

  new Vue
    el: '#my_orders'
    data: ->
      STATE: STATE
    methods:
      big: (num) ->
        new Big(num)